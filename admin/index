<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>학생 학습 현황 대시보드</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
    <style>
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* 활성화된 버튼 스타일 */
        .active-grade-btn {
            background-color: #3B82F6; /* bg-blue-600 */
            color: white;
            font-weight: bold;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">

    <div id="app" class="container mx-auto p-4 md:p-8">
        
        <!-- 로그인 화면 -->
        <div id="login-screen" class="text-center">
            <h1 class="text-3xl font-bold mb-6 text-gray-800">관리자 대시보드</h1>
            <p id="auth-message" class="mb-4 text-gray-600">관리자 계정으로 로그인해주세요.</p>
            <button id="login-btn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-transform transform hover:scale-105">
                Google 계정으로 로그인
            </button>
        </div>

        <!-- 메인 대시보드 (로그인 후 표시) -->
        <div id="dashboard" class="hidden">
            <div class="flex justify-between items-center mb-6 pb-4 border-b">
                <div>
                    <h1 class="text-3xl font-bold text-gray-800">학생 학습 현황</h1>
                    <p id="admin-info" class="text-sm text-gray-500"></p>
                </div>
                <button id="logout-btn" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-transform transform hover:scale-105">
                    로그아웃
                </button>
            </div>
            
            <!-- 학년 선택 -->
            <div class="mb-6 bg-white p-4 rounded-lg shadow">
                <h2 class="text-lg font-bold mb-3 text-gray-700">학년 선택</h2>
                <div id="grade-selection" class="flex space-x-2">
                    <button data-grade="1y" class="grade-btn flex-1 py-2 px-4 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 transition">1학년</button>
                    <button data-grade="2y" class="grade-btn flex-1 py-2 px-4 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 transition">2학년</button>
                    <button data-grade="3y" class="grade-btn flex-1 py-2 px-4 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 transition">3학년</button>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <!-- 학생 목록 -->
                <div class="md:col-span-1 bg-white p-6 rounded-lg shadow-lg">
                    <h2 id="student-list-title" class="text-xl font-bold mb-4 text-gray-700">학생 목록</h2>
                    <div id="student-list-prompt" class="text-center text-gray-500 py-10">
                        <p>먼저 학년을 선택해주세요.</p>
                    </div>
                    <div id="student-list-loader" class="hidden flex justify-center items-center h-40">
                        <div class="loader"></div>
                    </div>
                    <ul id="student-list" class="space-y-2">
                        <!-- 학생 목록이 여기에 동적으로 추가됩니다 -->
                    </ul>
                </div>

                <!-- 학생 상세 통계 -->
                <div id="student-details-container" class="md:col-span-2 bg-white p-6 rounded-lg shadow-lg">
                    <div id="details-prompt" class="text-center text-gray-500 h-full flex items-center justify-center">
                        <p>왼쪽 목록에서 학생을 선택하여 학습 현황을 확인하세요.</p>
                    </div>
                    <div id="student-details-loader" class="hidden flex justify-center items-center h-40">
                        <div class="loader"></div>
                    </div>
                    <div id="student-details" class="hidden">
                        <h2 id="student-name-title" class="text-2xl font-bold mb-4 text-gray-800 border-b pb-2"></h2>
                        <div id="stats-container" class="space-y-6">
                            <!-- 통계 테이블이 여기에 동적으로 추가됩니다 -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script>
        // ================================================================
        // Firebase Configuration (학생용 앱과 동일)
        // ================================================================
        const firebaseConfig = {
            apiKey: "AIzaSyBE_Gxd1haPazVK61F9sjCwK0X4Gw5rERM",
            authDomain: "wordapp-91c0a.firebaseapp.com",
            projectId: "wordapp-91c0a",
            storageBucket: "wordapp-91c0a.firebasestorage.app",
            messagingSenderId: "213863780677",
            appId: "1:213863780677:web:78d6b8755866a0c5ddee2c"
        };

        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();

        // ================================================================
        // 관리자 페이지 컨트롤러
        // ================================================================
        const adminApp = {
            ADMIN_EMAIL: 'puroome@gmail.com',
            SCRIPT_URL: 'https://script.google.com/macros/s/AKfycbzmcgauS6eUd2QAncKzX_kQ1K1b7x7xn2k6s1JWwf-FxmrbIt-_9-eAvNrFkr5eDdwr0w/exec',
            state: {
                wordLists: {},
                allUsers: {}, // 전체 사용자 정보 캐시 (id, displayName, email)
                studentNameMap: {}, // 시트에서 가져온 이름 매핑
                gradeStudentMap: {}, // 시트에서 가져온 학년 배정
                selectedGrade: null,
            },
            elements: {
                loginScreen: document.getElementById('login-screen'),
                authMessage: document.getElementById('auth-message'),
                loginBtn: document.getElementById('login-btn'),
                logoutBtn: document.getElementById('logout-btn'),
                dashboard: document.getElementById('dashboard'),
                adminInfo: document.getElementById('admin-info'),
                gradeSelection: document.getElementById('grade-selection'),
                studentListTitle: document.getElementById('student-list-title'),
                studentListPrompt: document.getElementById('student-list-prompt'),
                studentList: document.getElementById('student-list'),
                studentListLoader: document.getElementById('student-list-loader'),
                detailsPrompt: document.getElementById('details-prompt'),
                studentDetails: document.getElementById('student-details'),
                studentDetailsLoader: document.getElementById('student-details-loader'),
                studentNameTitle: document.getElementById('student-name-title'),
                statsContainer: document.getElementById('stats-container'),
            },

            init() {
                this.bindAuthEvents();
            },

            bindAuthEvents() {
                this.elements.loginBtn.addEventListener('click', () => {
                    const provider = new firebase.auth.GoogleAuthProvider();
                    auth.signInWithPopup(provider);
                });

                this.elements.logoutBtn.addEventListener('click', () => {
                    this.state.selectedGrade = null;
                    auth.signOut();
                });

                this.elements.gradeSelection.addEventListener('click', (e) => {
                    if (e.target.classList.contains('grade-btn')) {
                        const grade = e.target.dataset.grade;
                        this.state.selectedGrade = grade;

                        document.querySelectorAll('.grade-btn').forEach(btn => btn.classList.remove('active-grade-btn'));
                        e.target.classList.add('active-grade-btn');

                        this.elements.studentListTitle.textContent = `${grade.replace('y','')}학년 학생 목록`;
                        this.displayStudentsForGrade(grade);
                    }
                });

                auth.onAuthStateChanged(user => {
                    if (user) {
                        if (user.email === this.ADMIN_EMAIL) {
                            this.showDashboard(user);
                        } else {
                            this.showAccessDenied();
                        }
                    } else {
                        this.showLoginScreen();
                    }
                });
            },
            
            async showDashboard(user) {
                this.elements.loginScreen.classList.add('hidden');
                this.elements.dashboard.classList.remove('hidden');
                this.elements.adminInfo.textContent = `관리자: ${user.displayName} (${user.email})`;
                
                // 대시보드 표시 전에 관리자 설정(학생명단) 및 사용자 정보 로드
                await Promise.all([
                    this.loadAdminConfig(),
                    this.cacheAllUsers()
                ]);

                this.resetViews();
            },
            
            async loadAdminConfig() {
                try {
                    const url = new URL(this.SCRIPT_URL);
                    url.searchParams.append('action', 'getStudentAdminData');
                    const response = await fetch(url);
                    const data = await response.json();
                    if (data.success) {
                        this.state.studentNameMap = data.studentNameMap;
                        this.state.gradeStudentMap = data.gradeStudentMap;
                    } else {
                        throw new Error(data.message);
                    }
                } catch(e) {
                    console.error("관리자 설정(학생 명단) 로딩 실패:", e);
                    alert(`학생 명단을 Google Sheets에서 불러오는 데 실패했습니다: ${e.message}`);
                }
            },

            showLoginScreen() {
                this.elements.dashboard.classList.add('hidden');
                this.elements.loginScreen.classList.remove('hidden');
                this.elements.authMessage.textContent = '관리자 계정으로 로그인해주세요.';
                this.elements.authMessage.classList.remove('text-red-500', 'font-bold');
            },
            
            showAccessDenied() {
                auth.signOut();
                this.elements.dashboard.classList.add('hidden');
                this.elements.loginScreen.classList.remove('hidden');
                this.elements.authMessage.textContent = '접근 권한이 없습니다. 관리자 계정으로 로그인해주세요.';
                this.elements.authMessage.classList.add('text-red-500', 'font-bold');
            },
            
            resetViews() {
                 this.elements.studentListPrompt.classList.remove('hidden');
                 this.elements.detailsPrompt.classList.remove('hidden');
                 this.elements.studentList.innerHTML = '';
                 this.elements.studentDetails.classList.add('hidden');
                 document.querySelectorAll('.grade-btn').forEach(btn => btn.classList.remove('active-grade-btn'));
                 this.elements.studentListTitle.textContent = '학생 목록';
            },
            
            async cacheAllUsers() {
                try {
                    const snapshot = await db.collection('users').get();
                    snapshot.docs.forEach(doc => {
                        this.state.allUsers[doc.data().email] = {
                            id: doc.id,
                            ...doc.data()
                        };
                    });
                } catch(e) {
                    console.error("전체 사용자 정보 캐시 실패:", e);
                }
            },
            
            displayStudentsForGrade(grade) {
                this.elements.studentList.innerHTML = '';
                this.elements.studentListPrompt.classList.add('hidden');
                this.elements.detailsPrompt.classList.remove('hidden');
                this.elements.studentDetails.classList.add('hidden');

                const studentEmails = this.state.gradeStudentMap[grade] || [];
                if (studentEmails.length === 0) {
                    this.elements.studentList.innerHTML = '<li class="text-gray-500 p-3">해당 학년에 등록된 학생이 없습니다.</li>';
                    return;
                }
                
                studentEmails.forEach(email => {
                    const studentData = this.state.allUsers[email];
                    if (studentData) {
                        const displayName = this.state.studentNameMap[email] || studentData.displayName;

                        const li = document.createElement('li');
                        const a = document.createElement('a');
                        a.href = '#';
                        a.className = 'block p-3 rounded-lg hover:bg-gray-100 transition-colors';
                        a.innerHTML = `
                            <p class="font-semibold text-gray-800">${displayName}</p>
                            <p class="text-sm text-gray-500">${email}</p>
                        `;
                        a.onclick = (e) => {
                            e.preventDefault();
                            document.querySelectorAll('#student-list a').forEach(el => el.classList.remove('bg-blue-100'));
                            a.classList.add('bg-blue-100');
                            this.loadStudentDetails(studentData, displayName, grade);
                        };
                        li.appendChild(a);
                        this.elements.studentList.appendChild(li);
                    }
                });
            },

            async loadStudentDetails(student, displayName, grade) {
                this.elements.detailsPrompt.classList.add('hidden');
                this.elements.studentDetails.classList.add('hidden');
                this.elements.studentDetailsLoader.classList.remove('hidden');
                this.elements.studentNameTitle.textContent = `${displayName} 학생 (${grade.replace('y','')}학년) 학습 현황`;
                
                try {
                    if (!this.state.wordLists[grade]) {
                        const url = new URL(this.SCRIPT_URL);
                        url.searchParams.append('action', 'getWords');
                        url.searchParams.append('sheet', grade);
                        const response = await fetch(url);
                        const data = await response.json();
                        this.state.wordLists[grade] = data.words;
                    }
                    const totalWords = this.state.wordLists[grade];

                    const progressRef = db.collection('users').doc(student.id).collection('progress').doc(grade);
                    const progressSnap = await progressRef.get();
                    const progressData = progressSnap.exists ? progressSnap.data() : {};
                    
                    const stats = this.calculateStats(totalWords, progressData);
                    this.renderStats(stats);

                } catch (error) {
                    console.error("학생 통계 로딩 실패:", error);
                    this.elements.statsContainer.innerHTML = '<p class="text-red-500">통계 정보를 불러오는 데 실패했습니다.</p>';
                } finally {
                    this.elements.studentDetailsLoader.classList.add('hidden');
                    this.elements.studentDetails.classList.remove('hidden');
                }
            },
            
            calculateStats(totalWords, progressData) {
                const counts = { learned: 0, learning: 0, review: 0, unseen: 0 };
                
                if (!totalWords || totalWords.length === 0) {
                     return { ...counts, total: 0 };
                }

                totalWords.forEach(wordObj => {
                    const word = wordObj.word;
                    const progress = progressData[word];
                    let status = 'unseen';

                    if (progress) {
                        const statuses = ['MULTIPLE_CHOICE_MEANING', 'FILL_IN_THE_BLANK', 'MULTIPLE_CHOICE_DEFINITION']
                            .map(type => progress[type] || 'unseen');
                        
                        if (statuses.includes('incorrect')) {
                            status = 'review';
                        } else if (statuses.every(s => s === 'correct')) {
                            status = 'learned';
                        } else if (statuses.some(s => s === 'correct')) {
                            status = 'learning';
                        }
                    }
                    counts[status]++;
                });
                
                return { ...counts, total: totalWords.length };
            },

            renderStats(stats) {
                this.elements.statsContainer.innerHTML = '';
                const statCard = document.createElement('div');
                
                const statItems = [
                    { name: '학습 완료', count: stats.learned, color: 'text-green-600', bg: 'bg-green-100' },
                    { name: '복습 필요', count: stats.review, color: 'text-orange-600', bg: 'bg-orange-100' },
                    { name: '학습 중', count: stats.learning, color: 'text-blue-600', bg: 'bg-blue-100' },
                    { name: '미학습', count: stats.unseen, color: 'text-gray-600', bg: 'bg-gray-100' }
                ];

                let itemsHtml = '';
                statItems.forEach(item => {
                     const percentage = stats.total > 0 ? (item.count / stats.total * 100).toFixed(1) : 0;
                     itemsHtml += `
                        <div class="flex justify-between items-center py-2 border-b last:border-b-0">
                            <div>
                                <span class="font-semibold ${item.color}">${item.name}</span>
                            </div>
                            <div class="text-right">
                                <span class="text-sm font-mono w-24 inline-block text-left">${item.count} / ${stats.total} 개</span>
                                <span class="text-xs font-semibold ${item.color} ${item.bg} px-2 py-1 rounded-full ml-2 w-16 inline-block text-center">${percentage}%</span>
                            </div>
                        </div>
                     `;
                });
                
                statCard.innerHTML = `<div class="space-y-1">${itemsHtml}</div>`;
                this.elements.statsContainer.appendChild(statCard);
            }
        };

        adminApp.init();
    </script>
</body>
</html>

